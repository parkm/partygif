---
import Button from "./Button.astro";
import ColorFrame from "./ColorFrame.astro";
import PartyGifTitle from "./PartyGifTitle.astro";
---

<div class="party-gif">
  <PartyGifTitle />
  <div class="container">
    <div class="upload-area" id="uploadArea">
      <input
        type="file"
        id="fileInput"
        accept=".png,.jpg,.jpeg"
        style="display: none;"
      />
      <label for="fileInput" class="upload-label">
        <div class="upload-content">
          <span class="upload-icon">üìÅ</span>
          <p>Upload an image</p>
          <img id="uploadedImage" alt="" style="max-width: 320px;" />
        </div>
      </label>
    </div>

    <div class="color-buttons">
      <Button id="basicColors" variant="secondary">Use basic colors</Button>
      <Button id="partyColors" variant="secondary">Use party colors</Button>
      <Button id="customColors" variant="secondary">Set custom colors</Button>
    </div>

    <div id="tintBlocks" class="tint-blocks"></div>

    <div style="display: flex; gap: 2rem;">
      <div class="flex-col">
        <label for="qualitySlider" class="caption">Pixel Sample Interval (Lower is better quality)</label>
        <input type="range" id="qualitySlider" min="1" max="20" value="1" />
      </div>

      <div class="flex-col">
        <label for="alphaColorPicker" class="caption">Alpha Color</label>
        <input type="color" id="alphaColorPicker" value="#ffffff" />
      </div>
    </div>

    <Button id="addTint" variant="success" className="add-tint"
      >+ Add Color</Button
    >
    <Button id="generate" variant="primary" className="generate"
      >Generate</Button
    >

    <div id="outputGifContainer"></div>
    <div id="tintedCanvasContainer"></div>
  </div>

  <div id="color-frame-template" style="display: none;">
    <ColorFrame color="#ffffff" index={0} />
  </div>
</div>

<style>
  .party-gif {
    padding: 2rem;
    background-color: var(--card-bg);
  }
  h1 {
    margin-top: 0;
  }
  .container {
    max-width: 800px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  .upload-area {
    border: 2px dashed #ccc;
    text-align: center;
  }
  .upload-area label {
    cursor: pointer;
  }
  .upload-content {
    padding: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
  }
  .upload-area:hover {
    filter: brightness(1.5);
  }
  .upload-icon {
    font-size: 2rem;
  }
  .caption {
    font-size: 0.9rem;
    font-weight: 600;
  }
  .tint-blocks {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
  }
  .tint-block {
    padding: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  .generate {
    font-size: 1.2rem;
    padding: 1rem 2rem;
  }
  .flex-col {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  #outputGifContainer {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }
</style>
<script>
  import GIF from "gif.js";

  class PartyGifController {
    tints: string[];
    quality: number | string;
    alphaColor: string;

    constructor() {
      this.tints = [
        "#FF6B6B",
        "#FF6BB5",
        "#FF81FF",
        "#D081FF",
        "#81ACFF",
        "#81FFFF",
        "#81FF81",
        "#FFD081",
        "#FF8181",
      ];
      this.quality = 1;
      this.alphaColor = "#ffffff";
      this.setupEventListeners();
    }

    setupEventListeners() {
      document
        .getElementById("fileInput")
        ?.addEventListener("change", this.handleFileUpload.bind(this));
      document
        .getElementById("qualitySlider")
        ?.addEventListener(
          "input",
          (e) => (this.quality = (e.target as HTMLInputElement).value)
        );
      document
        .getElementById("alphaColorPicker")
        ?.addEventListener(
          "input",
          (e) => (this.alphaColor = (e.target as HTMLInputElement).value)
        );
      document
        .getElementById("basicColors")
        ?.addEventListener("click", this.setBasicColors.bind(this));
      document
        .getElementById("partyColors")
        ?.addEventListener("click", this.setPartyColors.bind(this));
      document
        .getElementById("customColors")
        ?.addEventListener("click", this.setCustomColors.bind(this));
      document
        .getElementById("addTint")
        ?.addEventListener("click", this.addTintBlock.bind(this));
      document
        .getElementById("generate")
        ?.addEventListener("click", this.generateGif.bind(this));

      this.renderTintBlocks();
    }

    handleFileUpload(event: Event) {
      const file = (event.target as HTMLInputElement).files?.[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = (e) => {
        const uploadedImage = document.getElementById(
          "uploadedImage"
        ) as HTMLImageElement;
        if (uploadedImage && typeof e.target?.result === "string")
          uploadedImage.src = e.target.result;
      };
      reader.readAsDataURL(file);
    }

    setBasicColors() {
      this.tints = [
        "#FF0000", // Red
        "#FFA500", // Orange
        "#FFFF00", // Yellow
        "#008000", // Green
        "#0000FF", // Blue
        "#800080", // Purple
      ];
      this.renderTintBlocks();
    }

    setPartyColors() {
      this.tints = [
        "#FF6B6B",
        "#FF6BB5",
        "#FF81FF",
        "#D081FF",
        "#81ACFF",
        "#81FFFF",
        "#81FF81",
        "#FFD081",
        "#FF8181",
      ];
      this.renderTintBlocks();
    }

    setCustomColors() {
      const colorString = prompt("Add colors", this.tints.join(","));
      if (!colorString) return;
      this.tints = colorString.split(",").map((c) => c.trim());
      this.renderTintBlocks();
    }

    addTintBlock() {
      this.tints.push("#ffffff");
      this.renderTintBlocks();
    }

    removeTintBlock(index: number) {
      this.tints.splice(index, 1);
      this.renderTintBlocks();
    }

    renderTintBlocks() {
      const container = document.getElementById("tintBlocks");
      const template = document.getElementById("color-frame-template");
      if (!container || !template) return;

      container.innerHTML = "";

      this.tints.forEach((tint, index) => {
        const frameElement = template.firstElementChild?.cloneNode(
          true
        ) as HTMLElement;
        if (!frameElement) return;

        const colorInput = frameElement.querySelector(
          'input[type="color"]'
        ) as HTMLInputElement;
        if (colorInput) {
          colorInput.value = tint;
          colorInput.dataset.index = index.toString();
        }

        const frameNumber = frameElement.querySelector(
          ".frame-number"
        ) as HTMLSpanElement;
        if (frameNumber) {
          frameNumber.textContent = `Frame ${index + 1}`;
        }

        const removeButton = frameElement.querySelector(
          ".remove-tint"
        ) as HTMLButtonElement;
        if (removeButton) {
          removeButton.dataset.index = index.toString();
          (removeButton as HTMLElement).id = `remove-${index}`;
        }

        container.appendChild(frameElement);
      });

      container.querySelectorAll('input[type="color"]').forEach((input) => {
        input.addEventListener("input", (e) => {
          if (!e.target) return;
          const target = e.target as HTMLInputElement;
          if (!target.dataset.index) return;
          const index = parseInt(target.dataset.index);
          this.tints[index] = target.value;
        });
      });

      container.querySelectorAll(".remove-tint").forEach((button) => {
        button.addEventListener("click", (e) => {
          if (!e.target) return;
          const target = e.target as HTMLButtonElement;
          if (!target.dataset.index) return;
          const index = parseInt(target.dataset.index);
          this.removeTintBlock(index);
        });
      });
    }

    genTintedImage(
      imgElement: HTMLImageElement,
      fillStyle: string,
      blendMode: GlobalCompositeOperation = "color"
    ) {
      let canvasElement = document.createElement("canvas");
      canvasElement.width = imgElement.width;
      canvasElement.height = imgElement.height;

      let tintCanvas = document.createElement("canvas");
      tintCanvas.width = canvasElement.width;
      tintCanvas.height = canvasElement.height;

      const tgc = tintCanvas.getContext("2d");
      tgc!.globalCompositeOperation = "destination-atop";
      tgc!.fillStyle = fillStyle;
      tgc!.fillRect(0, 0, tintCanvas.width, tintCanvas.height);
      tgc!.drawImage(imgElement, 0, 0, tintCanvas.width, tintCanvas.height);

      const gc = canvasElement.getContext("2d");
      gc!.globalCompositeOperation = blendMode;
      gc!.drawImage(
        imgElement,
        0,
        0,
        canvasElement.width,
        canvasElement.height
      );
      gc!.drawImage(tintCanvas, 0, 0);

      return canvasElement;
    }

    generateGif() {
      const uploadedImage = document.getElementById(
        "uploadedImage"
      ) as HTMLImageElement;
      if (!uploadedImage?.src || this.tints.length === 0) return;

      const tintedCanvasContainer = document.getElementById(
        "tintedCanvasContainer"
      );
      const outputGifContainer = document.getElementById("outputGifContainer");
      if (!tintedCanvasContainer || !outputGifContainer) return;
      tintedCanvasContainer.innerHTML = "";
      outputGifContainer.innerHTML = "Generating...";

      const tintedCanvases = this.tints.map((tint) => {
        const canvasElement = document.createElement("canvas");
        canvasElement.width = uploadedImage.width;
        canvasElement.height = uploadedImage.height;
        const gc = canvasElement.getContext("2d");
        const tintedImage = this.genTintedImage(uploadedImage, tint);
        gc!.drawImage(tintedImage!, 0, 0);
        tintedCanvasContainer.appendChild(canvasElement);
        outputGifContainer.style.height = `${uploadedImage.height}px`;
        return canvasElement;
      });

      const gif = new GIF({
        workers: 2,
        quality: this.quality,
        workerScript: "./gif.worker.js",
        transparent: "0x" + this.alphaColor.replace("#", ""),
      });

      tintedCanvases.forEach((c) =>
        gif.addFrame(c, { copy: true, delay: 0.001 })
      );

      gif.on("finished", (blob: Blob) => {
        const img = document.createElement("img");
        img.src = URL.createObjectURL(blob);
        outputGifContainer.innerHTML = "";
        outputGifContainer.appendChild(img);
      });

      gif.render();
    }
  }

  // Initialize the controller when the DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    new PartyGifController();
  });
</script>
